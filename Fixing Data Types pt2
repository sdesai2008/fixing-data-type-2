Fixing air_pollution_score Data Type
2008: convert string to float
2018: convert int to float
Load datasets data_08_v3.csv and data_18_v3.csv. You should've created these data files in the previous section: Fixing Data Types Pt 1.

# load datasets
import pandas as pd
df_08 = pd.read_csv('data_08_v3.csv')
df_18 = pd.read_csv('data_18_v3.csv')
df_18.shape
(794, 13)
df_08.shape
(986, 13)
# try using pandas' to_numeric or astype function to convert the
# 2008 air_pollution_score column to float -- this won't work
# df_08['air_pollution_score'] = pd.to_numeric(df_08['air_pollution_score'], errors='coerce')
df_08['air_pollution_score'] = df_08['air_pollution_score'].astype(float)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-11-0e64d877c5a7> in <module>()
      2 # 2008 air_pollution_score column to float -- this won't work
      3 # df_08['air_pollution_score'] = pd.to_numeric(df_08['air_pollution_score'], errors='coerce')
----> 4 df_08['air_pollution_score'] = df_08['air_pollution_score'].astype(float)

/opt/conda/lib/python3.6/site-packages/pandas/util/_decorators.py in wrapper(*args, **kwargs)
    176                 else:
    177                     kwargs[new_arg_name] = new_arg_value
--> 178             return func(*args, **kwargs)
    179         return wrapper
    180     return _deprecate_kwarg

/opt/conda/lib/python3.6/site-packages/pandas/core/generic.py in astype(self, dtype, copy, errors, **kwargs)
   4999             # else, only a single dtype is given
   5000             new_data = self._data.astype(dtype=dtype, copy=copy, errors=errors,
-> 5001                                          **kwargs)
   5002             return self._constructor(new_data).__finalize__(self)
   5003 

/opt/conda/lib/python3.6/site-packages/pandas/core/internals.py in astype(self, dtype, **kwargs)
   3712 
   3713     def astype(self, dtype, **kwargs):
-> 3714         return self.apply('astype', dtype=dtype, **kwargs)
   3715 
   3716     def convert(self, **kwargs):

/opt/conda/lib/python3.6/site-packages/pandas/core/internals.py in apply(self, f, axes, filter, do_integrity_check, consolidate, **kwargs)
   3579 
   3580             kwargs['mgr'] = self
-> 3581             applied = getattr(b, f)(**kwargs)
   3582             result_blocks = _extend_blocks(applied, result_blocks)
   3583 

/opt/conda/lib/python3.6/site-packages/pandas/core/internals.py in astype(self, dtype, copy, errors, values, **kwargs)
    573     def astype(self, dtype, copy=False, errors='raise', values=None, **kwargs):
    574         return self._astype(dtype, copy=copy, errors=errors, values=values,
--> 575                             **kwargs)
    576 
    577     def _astype(self, dtype, copy=False, errors='raise', values=None,

/opt/conda/lib/python3.6/site-packages/pandas/core/internals.py in _astype(self, dtype, copy, errors, values, klass, mgr, **kwargs)
    662 
    663                 # _astype_nansafe works fine with 1-d only
--> 664                 values = astype_nansafe(values.ravel(), dtype, copy=True)
    665                 values = values.reshape(self.shape)
    666 

/opt/conda/lib/python3.6/site-packages/pandas/core/dtypes/cast.py in astype_nansafe(arr, dtype, copy)
    728 
    729     if copy:
--> 730         return arr.astype(dtype, copy=True)
    731     return arr.view(dtype)
    732 

ValueError: could not convert string to float: '6/4'

​
type(df_08.loc[0,"air_pollution_score"])
str
df_08.shape
(986, 13)
Figuring out the issue
Looks like this isn't going to be as simple as converting the datatype. According to the error above, the air pollution score value in one of the rows is "6/4" - let's check it out.

df_08[df_08.air_pollution_score == '6/4']
model	displ	cyl	trans	drive	fuel	veh_class	air_pollution_score	city_mpg	hwy_mpg	cmb_mpg	greenhouse_gas_score	smartway
582	MERCEDES-BENZ C300	3.0	6	Auto-L7	2WD	ethanol/gas	small car	6/4	13/18	19/25	15/21	7/6	no
It's not just the air pollution score!
The mpg columns and greenhouse gas scores also seem to have the same problem - maybe that's why these were all saved as strings! According to this link, which I found from the PDF documentation:

"If a vehicle can operate on more than one type of fuel, an estimate is provided for each fuel type."
Ohh... so all vehicles with more than one fuel type, or hybrids, like the one above (it uses ethanol AND gas) will have a string that holds two values - one for each. This is a little tricky, so I'm going to show you how to do it with the 2008 dataset, and then you'll try it with the 2018 dataset.

# First, let's get all the hybrids in 2008
hb_08 = df_08[df_08['fuel'].str.contains('/')]
hb_08
model	displ	cyl	trans	drive	fuel	veh_class	air_pollution_score	city_mpg	hwy_mpg	cmb_mpg	greenhouse_gas_score	smartway
582	MERCEDES-BENZ C300	3.0	6	Auto-L7	2WD	ethanol/gas	small car	6/4	13/18	19/25	15/21	7/6	no
Looks like this dataset only has one! The 2018 has MANY more - but don't worry - the steps I'm taking here will work for that as well!

# hybrids in 2018
hb_18 = df_18[df_18['fuel'].str.contains('/')]
hb_18
model	displ	cyl	trans	drive	fuel	veh_class	air_pollution_score	city_mpg	hwy_mpg	cmb_mpg	greenhouse_gas_score	smartway
52	BMW 330e	2.0	4	SemiAuto-8	2WD	Gasoline/Electricity	small car	3	28/66	34/78	30/71	10	Yes
78	BMW 530e	2.0	4	SemiAuto-8	2WD	Gasoline/Electricity	small car	7	27/70	31/75	29/72	10	Elite
79	BMW 530e	2.0	4	SemiAuto-8	4WD	Gasoline/Electricity	small car	7	27/66	31/68	28/67	10	Elite
92	BMW 740e	2.0	4	SemiAuto-8	4WD	Gasoline/Electricity	large car	3	25/62	29/68	27/64	9	Yes
189	CHEVROLET Impala	3.6	6	SemiAuto-6	2WD	Ethanol/Gas	large car	5	14/18	20/28	16/22	4	No
195	CHEVROLET Silverado 15	4.3	6	Auto-6	2WD	Ethanol/Gas	pickup	5	12/18	16/24	14/20	4	No
196	CHEVROLET Silverado 15	4.3	6	Auto-6	4WD	Ethanol/Gas	pickup	5	12/17	15/22	13/19	3	No
197	CHEVROLET Silverado 15	5.3	8	Auto-6	2WD	Ethanol/Gas	pickup	3	12/16	17/23	14/19	3	No
212	CHEVROLET Suburban 1500	5.3	8	Auto-6	2WD	Ethanol/Gas	standard SUV	3	12/16	17/23	14/19	3	No
214	CHEVROLET Suburban 1500	5.3	8	Auto-6	4WD	Ethanol/Gas	standard SUV	3	11/16	15/22	12/18	3	No
216	CHEVROLET Tahoe 1500	5.3	8	Auto-6	2WD	Ethanol/Gas	standard SUV	3	12/16	17/23	14/19	3	No
218	CHEVROLET Tahoe 1500	5.3	8	Auto-6	4WD	Ethanol/Gas	standard SUV	3	11/16	16/22	13/18	3	No
225	CHEVROLET Volt	1.5	4	CVT	2WD	Gasoline/Electricity	small car	3	43/113	42/99	42/106	10	Yes
226	CHEVROLET Volt	1.5	4	CVT	2WD	Gasoline/Electricity	small car	7	43/113	42/99	42/106	10	Elite
227	CHRYSLER 300	3.6	6	Auto-8	2WD	Ethanol/Gas	large car	3	14/19	22/30	17/23	5	No
229	CHRYSLER 300	3.6	6	Auto-8	4WD	Ethanol/Gas	large car	3	13/18	20/27	16/21	4	No
244	DODGE Charger	3.6	6	Auto-8	2WD	Ethanol/Gas	large car	3	14/19	22/30	17/23	5	No
246	DODGE Charger	3.6	6	Auto-8	4WD	Ethanol/Gas	large car	3	13/18	20/27	16/21	4	No
300	FORD Fusion Energi Plug-in Hybrid	2.0	4	CVT	2WD	Gasoline/Electricity	midsize car	7	43/102	41/91	42/97	10	Elite
326	GMC Sierra 15	4.3	6	Auto-6	2WD	Ethanol/Gas	pickup	5	12/18	16/24	14/20	4	No
327	GMC Sierra 15	4.3	6	Auto-6	4WD	Ethanol/Gas	pickup	5	12/17	15/22	13/19	3	No
328	GMC Sierra 15	5.3	8	Auto-6	2WD	Ethanol/Gas	pickup	3	12/16	17/23	14/19	3	No
345	GMC Yukon 1500	5.3	8	Auto-6	2WD	Ethanol/Gas	standard SUV	3	12/16	17/23	14/19	3	No
347	GMC Yukon 1500	5.3	8	Auto-6	4WD	Ethanol/Gas	standard SUV	3	11/16	16/22	13/18	3	No
351	GMC Yukon 1500 XL	5.3	8	Auto-6	2WD	Ethanol/Gas	standard SUV	3	12/16	17/23	14/19	3	No
354	GMC Yukon XL 1500	5.3	8	Auto-6	4WD	Ethanol/Gas	standard SUV	3	11/16	15/22	12/18	3	No
442	JEEP Cherokee	2.4	4	Auto-9	2WD	Ethanol/Gas	small SUV	3	15/21	22/30	18/25	5	No
444	JEEP Cherokee	2.4	4	Auto-9	4WD	Ethanol/Gas	small SUV	3	14/21	21/28	17/23	5	No
462	KARMA Revero	2.0	4	Auto-1	2WD	Gasoline/Electricity	small car	1	20/59	21/61	20/60	10	No
571	MERCEDES-BENZ CLA250 4Matic	2.0	4	AutoMan-7	4WD	Ethanol/Gas	small car	5	17/24	24/32	20/27	6	No
578	MERCEDES-BENZ GLA250 4Matic	2.0	4	AutoMan-7	4WD	Ethanol/Gas	small SUV	5	17/23	23/31	19/26	5	No
584	MERCEDES-BENZ GLE350 4Matic	3.5	6	Auto-7	4WD	Ethanol/Gas	standard SUV	3	13/18	17/22	14/19	3	No
616	MINI Cooper SE Countryman All4	1.5	3	SemiAuto-6	4WD	Gasoline/Electricity	midsize car	3	28/63	27/66	27/65	9	Yes
742	TOYOTA Sequoia FFV	5.7	8	SemiAuto-6	4WD	Ethanol/Gas	standard SUV	5	9/13	13/17	10/14	1	No
747	TOYOTA Tundra FFV	5.7	8	SemiAuto-6	4WD	Ethanol/Gas	pickup	5	9/13	12/17	10/15	2	No
777	VOLVO S90	2.0	4	SemiAuto-8	4WD	Gasoline/Electricity	midsize car	7	26/70	33/72	29/71	10	Elite
789	VOLVO XC 60	2.0	4	SemiAuto-8	4WD	Gasoline/Electricity	small SUV	7	26/60	28/58	26/59	10	Elite
793	VOLVO XC 90	2.0	4	SemiAuto-8	4WD	Gasoline/Electricity	standard SUV	7	26/63	30/61	27/62	10	Elite
We're going to take each hybrid row and split them into two new rows - one with values for the first fuel type (values before the "/"), and the other with values for the second fuel type (values after the "/"). Let's separate them with two dataframes!

# create two copies of the 2008 hybrids dataframe
df1 = hb_08.copy()  # data on first fuel type of each hybrid vehicle
df2 = hb_08.copy()  # data on second fuel type of each hybrid vehicle
​
# Each one should look like this
df1
model	displ	cyl	trans	drive	fuel	veh_class	air_pollution_score	city_mpg	hwy_mpg	cmb_mpg	greenhouse_gas_score	smartway
582	MERCEDES-BENZ C300	3.0	6	Auto-L7	2WD	ethanol/gas	small car	6/4	13/18	19/25	15/21	7/6	no
For this next part, we're going use pandas' apply function. See the docs here.

# columns to split by "/"
split_columns = ['fuel', 'air_pollution_score', 'city_mpg', 'hwy_mpg', 'cmb_mpg', 'greenhouse_gas_score']
​
# apply split function to each column of each dataframe copy
for c in split_columns:
    
    
    df1[c] = df1[c].apply(lambda x: x.split("/")[0])
    df2[c] = df2[c].apply(lambda x: x.split("/")[1])
# this dataframe holds info for the FIRST fuel type of the hybrid
# aka the values before the "/"s
df1
model	displ	cyl	trans	drive	fuel	veh_class	air_pollution_score	city_mpg	hwy_mpg	cmb_mpg	greenhouse_gas_score	smartway
582	MERCEDES-BENZ C300	3.0	6	Auto-L7	2WD	ethanol	small car	6	13	19	15	7	no
# this dataframe holds info for the SECOND fuel type of the hybrid
# aka the values after the "/"s
df2
model	displ	cyl	trans	drive	fuel	veh_class	air_pollution_score	city_mpg	hwy_mpg	cmb_mpg	greenhouse_gas_score	smartway
582	MERCEDES-BENZ C300	3.0	6	Auto-L7	2WD	gas	small car	4	18	25	21	6	no
# combine dataframes to add to the original dataframe
new_rows = df1.append(df2)
​
# now we have separate rows for each fuel type of each vehicle!
new_rows
model	displ	cyl	trans	drive	fuel	veh_class	air_pollution_score	city_mpg	hwy_mpg	cmb_mpg	greenhouse_gas_score	smartway
582	MERCEDES-BENZ C300	3.0	6	Auto-L7	2WD	ethanol	small car	6	13	19	15	7	no
582	MERCEDES-BENZ C300	3.0	6	Auto-L7	2WD	gas	small car	4	18	25	21	6	no
df_08.drop(hb_08.index, inplace=True)
​
df_08 = df_08.append(new_rows, ignore_index=True)
df_08[df_08['fuel'].str.contains('/')]
model	displ	cyl	trans	drive	fuel	veh_class	air_pollution_score	city_mpg	hwy_mpg	cmb_mpg	greenhouse_gas_score	smartway
# drop the original hybrid rows
#df_08.drop(hb_08.index, inplace=True)
​
# add in our newly separated rows
#df_08 = df_08.append(new_rows, ignore_index=True)
# check that all the original hybrid rows with "/"s are gone
df_08[df_08['fuel'].str.contains('/')]
model	displ	cyl	trans	drive	fuel	veh_class	air_pollution_score	city_mpg	hwy_mpg	cmb_mpg	greenhouse_gas_score	smartway
df_08.shape
(987, 13)
Repeat this process for the 2018 dataset
# create two copies of the 2018 hybrids dataframe, hb_18
df3 = hb_18.copy()
df4 = hb_18.copy()
Split values for fuel, city_mpg, hwy_mpg, cmb_mpg
You don't need to split for air_pollution_score or greenhouse_gas_score here because these columns are already ints in the 2018 dataset.

# list of columns to split
split_columns = ['fuel', 'city_mpg', 'cmb_mpg', 'hwy_mpg']
​
# apply split function to each column of each dataframe copy
for c in split_columns:
    df3[c] = df3[c].apply(lambda x: x.split("/")[0])
    df4[c] = df4[c].apply(lambda x: x.split("/")[1])
​
# append the two dataframes
new_rows = df3.append(df4)
​
# drop each hybrid row from the original 2018 dataframe
# do this by using pandas' drop function with hb_18's index
df_18.drop(hb_18.index, inplace=True)
​
# append new_rows to df_18
df_18 = df_18.append(new_rows, ignore_index=True)
# check that they're gone
df_18[df_18['fuel'].str.contains('/')]
model	displ	cyl	trans	drive	fuel	veh_class	air_pollution_score	city_mpg	hwy_mpg	cmb_mpg	greenhouse_gas_score	smartway
​
df_18.shape
(832, 13)
Now we can comfortably continue the changes needed for air_pollution_score! Here they are again:
2008: convert string to float
2018: convert int to float
# convert string to float for 2008 air pollution column
df_08['air_pollution_score'] = df_08['air_pollution_score'].astype(float)
# convert int to float for 2018 air pollution column
df_18['air_pollution_score'] = df_18['air_pollution_score'].astype(float)
type(df_18.loc[0, "cyl"])
numpy.int64
df_08.to_csv('data_08_v4.csv', index=False)
df_18.to_csv('data_18_v4.csv', index=False)
